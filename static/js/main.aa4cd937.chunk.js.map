{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","api.ts","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","query","setQuery","handleAddMovie","useState","isMovieExist","setIsMovieExist","showPreview","setShowPreview","currentMovie","setCurrentMovie","load","setLoad","useEffect","htmlFor","type","id","placeholder","classnames","value","onChange","event","target","disabled","onClick","preventDefault","setTimeout","App","setMovies","setMovie","fetch","then","res","json","catch","Response","Error","getMovie","foundMovie","Title","imdbID","Plot","Poster","newMovie","some","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa4cd937.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie?.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie?.description}\n        <br />\n        <a href={movie?.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\n\nimport './FindMovie.scss';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  query: string;\n  setQuery: (value: string) => void;\n  movie: Movie | null;\n  handleAddMovie: (val: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  query,\n  setQuery,\n  movie,\n  handleAddMovie,\n}) => {\n  const [isMovieExist, setIsMovieExist] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [currentMovie, setCurrentMovie] = useState<Movie | null>(null);\n\n  const [load, setLoad] = useState(false);\n\n  const checkIfMovieExist = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setLoad(true);\n\n    if (!movie) {\n      setIsMovieExist(true);\n    } else {\n      setCurrentMovie(movie);\n      setShowPreview(true);\n      setIsMovieExist(false);\n    }\n\n    setTimeout(() => {\n      setLoad(false);\n    }, 100);\n  };\n\n  const reset = () => {\n    setShowPreview(false);\n    setQuery('');\n    setCurrentMovie(null);\n  };\n\n  useEffect(() => {\n    setIsMovieExist(false);\n  }, [query]);\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classnames(\n                'input',\n                {\n                  'is-danger': isMovieExist,\n                },\n              )}\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          {isMovieExist && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              disabled={!query}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classnames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': load,\n                },\n              )}\n              onClick={checkIfMovieExist}\n            >\n              {currentMovie\n                ? ('Search again')\n                : ('Find a movie')}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {showPreview && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  if (currentMovie) {\n                    handleAddMovie(currentMovie);\n                    reset();\n                  }\n                }}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {showPreview && currentMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={currentMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\nimport { ResponseError } from './types/ReponseError';\nimport { MovieData } from './types/MovieData';\n\nconst DEFAULT_IMG_URL\n  = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n\n  const checkIfMovieExist = (response: ResponseError | MovieData):\n    response is MovieData => !('Error' in response);\n\n  useEffect(() => {\n    getMovie(query)\n      .then((foundMovie) => {\n        if (checkIfMovieExist(foundMovie)) {\n          const {\n            Title, imdbID, Plot, Poster,\n          } = foundMovie;\n\n          const newMovie: Movie = {\n            title: Title,\n            description: Plot,\n            imgUrl: Poster === 'N/A'\n              ? DEFAULT_IMG_URL\n              : Poster,\n            imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n            imdbId: imdbID,\n          };\n\n          setMovie(newMovie);\n        } else {\n          setMovie(null);\n        }\n      });\n  }, [query]);\n\n  const addMovie = (newMovie: Movie) => {\n    if (!movies.some(({ imdbId }) => imdbId === newMovie.imdbId)) {\n      setMovies(prev => [...prev, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          setQuery={setQuery}\n          movie={movie}\n          handleAddMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=ed5491f3';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}